package domain

import (
	"fmt"
	"github.com/plumming/dx/pkg/alerts"
	"github.com/plumming/dx/pkg/config"
	"strings"

	"github.com/jenkins-x/jx-logging/pkg/log"
	"github.com/plumming/dx/pkg/cmd"
)

var (
	getVulnerabilityAlertsQuery = `{
	search(type:REPOSITORY, query: "%s", first: 100) {
      nodes {
      ... on Repository {
        nameWithOwner
        vulnerabilityAlerts(first: 10) {
          totalCount
          nodes {
            securityAdvisory {
              ghsaId
              severity
              summary
              cvss {
                vectorString
                score
              }
              identifiers {
                type
                value
              }
            }
            state
            createdAt
            dependabotUpdate {
              pullRequest {
                number
              }
            }
          }
        }
      }
    }
  }
}`
)

// GetVulnerabilityAlerts defines get vulnerability alerts request response.
type GetVulnerabilityAlerts struct {
	cmd.CommonOptions
	Alerts []alerts.Repository
}

// VulnerabilityAlertsData.
type VulnerabilityAlertsData struct {
	Search VulnerabilityAlertsSearch `json:"search"`
}

// VulnerabilityAlertsSearch.
type VulnerabilityAlertsSearch struct {
	VulnerabilityAlerts []alerts.Repository `json:"nodes"`
}

// NewGetVulnerabilityAlerts.
func NewGetVulnerabilityAlerts() *GetVulnerabilityAlerts {
	g := &GetVulnerabilityAlerts{}
	return g
}

// Validate input.
func (g *GetVulnerabilityAlerts) Validate() error {
	return nil
}

// Run the cmd.
func (g *GetVulnerabilityAlerts) Run() error {
	cfg, err := g.DxConfig()
	if err != nil {
		return err
	}

	var alerts []alerts.Repository

	for _, host := range cfg.GetConfiguredServers() {
		a, err := g.GetVulnerabilityAlertsForHost(host, cfg, getVulnerabilityAlertsQuery)
		if err != nil {
			return err
		}
		alerts = append(alerts, a...)
	}

	g.Alerts = alerts

	return nil
}

func (g *GetVulnerabilityAlerts) GetVulnerabilityAlertsForHost(host string, cfg config.Config, query string) ([]alerts.Repository, error) {
	client, err := g.GithubClient()
	if err != nil {
		return nil, err
	}

	queryString := strings.Join(cfg.GetReposToQuery(host), " ")
	queryToRun := fmt.Sprintf(query, queryString)
	log.Logger().Debugf("running query\n%s", queryToRun)

	data := VulnerabilityAlertsData{}
	err = client.GraphQL(host, queryToRun, nil, &data)
	if err != nil {
		return nil, err
	}

	return data.Search.VulnerabilityAlerts, nil
}
