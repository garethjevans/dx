package getcmd

import (
	"fmt"
	"github.com/pkg/errors"
	"github.com/plumming/dx/pkg/alerts"
	"github.com/plumming/dx/pkg/cmd"
	"github.com/plumming/dx/pkg/domain"
	"github.com/plumming/dx/pkg/util"

	"github.com/plumming/dx/pkg/table"
	"github.com/spf13/cobra"
)

type GetVulnerabilityAlertsCmd struct {
	cmd.CommonCmd
	Quiet bool
	Cmd   *cobra.Command
	Args  []string
}

func NewGetVulnerabilityAlertsCmd() *cobra.Command {
	c := &GetVulnerabilityAlertsCmd{}
	cmd := &cobra.Command{
		Use:   "vulnerability-alerts",
		Short: "Gets your open vulnerability alerts",
		Long:  "",
		Example: `Get a list of open vulnerability alerts:

  dx get alerts
`,
		Aliases: []string{"vulnerabilityalerts", "va", "security-alerts", "sa", "alerts"},
		RunE: func(cmd *cobra.Command, args []string) error {
			c.Cmd = cmd
			c.Args = args
			return c.Run()
		},
		Args: cobra.NoArgs,
	}

	c.AddOptions(cmd)

	cmd.Flags().BoolVarP(&c.Quiet, "quiet", "", false,
		"Hide the column headings")

	return cmd
}

func (c *GetVulnerabilityAlertsCmd) Run() error {
	d := domain.NewGetVulnerabilityAlerts()

	err := d.Validate()
	if err != nil {
		return errors.Wrap(err, "validate failed")
	}

	err = d.Run()
	if err != nil {
		return errors.Wrap(err, "run failed")
	}

	if c.Query != "" {
		fmt.Println(c.Filter(d.Alerts))
		return nil
	}

	table := table.NewTable(c.Cmd.OutOrStdout())

	if !c.Quiet {
		table.AddRow(
			"Repository",
			"Severity",
			"GHSA ID",
			"CVE",
			"Summary",
			"Created",
			"Fixed by PR",
		)
	}
	count := 0
	for _, a := range d.Alerts {
		for _, va := range a.VulnerabilityAlerts.Nodes {
			if va.State != "FIXED" {
				count++
				table.AddRow(
					a.NameWithOwner,
					colourSeverity(va.SecurityAdvisory.Severity),
					va.SecurityAdvisory.GhsaID,
					displayIdentifier(va.SecurityAdvisory.Identifiers, "CVE"),
					va.SecurityAdvisory.Summary,
					util.SafeTime(va.CreatedAt),
					util.ColorAnswer(dependabotPR(va.DependabotUpdate)),
				)
			}
		}
	}

	table.Render()

	if len(d.Alerts) > 0 {
		fmt.Printf("\nDisplaying %d Vulnerability Alerts\n", count)
	}

	return nil
}

func displayIdentifier(identifiers []alerts.Identifier, t string) string {
	for _, id := range identifiers {
		if id.Type == t {
			return id.Value
		}
	}
	return ""
}

func colourSeverity(severity string) string {
	if severity == "HIGH" || severity == "CRITICAL" {
		return util.ColorError(severity)
	}

	if severity == "LOW" {
		return util.ColorInfo(severity)
	}

	return severity
}

func dependabotPR(update alerts.DependabotUpdate) string {
	if update.PullRequest == nil {
		return ""
	}
	return fmt.Sprintf("PR-%d", update.PullRequest.Number)
}
