// Code generated by counterfeiter. DO NOT EDIT.
package configfakes

import (
	"sync"

	"github.com/plumming/dx/pkg/config"
)

type FakeConfig struct {
	GetBotAccountsStub        func() []string
	getBotAccountsMutex       sync.RWMutex
	getBotAccountsArgsForCall []struct {
	}
	getBotAccountsReturns struct {
		result1 []string
	}
	getBotAccountsReturnsOnCall map[int]struct {
		result1 []string
	}
	GetConfiguredServersStub        func() []string
	getConfiguredServersMutex       sync.RWMutex
	getConfiguredServersArgsForCall []struct {
	}
	getConfiguredServersReturns struct {
		result1 []string
	}
	getConfiguredServersReturnsOnCall map[int]struct {
		result1 []string
	}
	GetHiddenLabelsStub        func() []string
	getHiddenLabelsMutex       sync.RWMutex
	getHiddenLabelsArgsForCall []struct {
	}
	getHiddenLabelsReturns struct {
		result1 []string
	}
	getHiddenLabelsReturnsOnCall map[int]struct {
		result1 []string
	}
	GetMaxAgeOfPRsStub        func() int
	getMaxAgeOfPRsMutex       sync.RWMutex
	getMaxAgeOfPRsArgsForCall []struct {
	}
	getMaxAgeOfPRsReturns struct {
		result1 int
	}
	getMaxAgeOfPRsReturnsOnCall map[int]struct {
		result1 int
	}
	GetMaxNumberOfPRsStub        func() int
	getMaxNumberOfPRsMutex       sync.RWMutex
	getMaxNumberOfPRsArgsForCall []struct {
	}
	getMaxNumberOfPRsReturns struct {
		result1 int
	}
	getMaxNumberOfPRsReturnsOnCall map[int]struct {
		result1 int
	}
	GetReposToQueryStub        func(string) []string
	getReposToQueryMutex       sync.RWMutex
	getReposToQueryArgsForCall []struct {
		arg1 string
	}
	getReposToQueryReturns struct {
		result1 []string
	}
	getReposToQueryReturnsOnCall map[int]struct {
		result1 []string
	}
	SaveToDefaultLocationStub        func() error
	saveToDefaultLocationMutex       sync.RWMutex
	saveToDefaultLocationArgsForCall []struct {
	}
	saveToDefaultLocationReturns struct {
		result1 error
	}
	saveToDefaultLocationReturnsOnCall map[int]struct {
		result1 error
	}
	SaveToFileStub        func(string) error
	saveToFileMutex       sync.RWMutex
	saveToFileArgsForCall []struct {
		arg1 string
	}
	saveToFileReturns struct {
		result1 error
	}
	saveToFileReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfig) GetBotAccounts() []string {
	fake.getBotAccountsMutex.Lock()
	ret, specificReturn := fake.getBotAccountsReturnsOnCall[len(fake.getBotAccountsArgsForCall)]
	fake.getBotAccountsArgsForCall = append(fake.getBotAccountsArgsForCall, struct {
	}{})
	stub := fake.GetBotAccountsStub
	fakeReturns := fake.getBotAccountsReturns
	fake.recordInvocation("GetBotAccounts", []interface{}{})
	fake.getBotAccountsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) GetBotAccountsCallCount() int {
	fake.getBotAccountsMutex.RLock()
	defer fake.getBotAccountsMutex.RUnlock()
	return len(fake.getBotAccountsArgsForCall)
}

func (fake *FakeConfig) GetBotAccountsCalls(stub func() []string) {
	fake.getBotAccountsMutex.Lock()
	defer fake.getBotAccountsMutex.Unlock()
	fake.GetBotAccountsStub = stub
}

func (fake *FakeConfig) GetBotAccountsReturns(result1 []string) {
	fake.getBotAccountsMutex.Lock()
	defer fake.getBotAccountsMutex.Unlock()
	fake.GetBotAccountsStub = nil
	fake.getBotAccountsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfig) GetBotAccountsReturnsOnCall(i int, result1 []string) {
	fake.getBotAccountsMutex.Lock()
	defer fake.getBotAccountsMutex.Unlock()
	fake.GetBotAccountsStub = nil
	if fake.getBotAccountsReturnsOnCall == nil {
		fake.getBotAccountsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getBotAccountsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfig) GetConfiguredServers() []string {
	fake.getConfiguredServersMutex.Lock()
	ret, specificReturn := fake.getConfiguredServersReturnsOnCall[len(fake.getConfiguredServersArgsForCall)]
	fake.getConfiguredServersArgsForCall = append(fake.getConfiguredServersArgsForCall, struct {
	}{})
	stub := fake.GetConfiguredServersStub
	fakeReturns := fake.getConfiguredServersReturns
	fake.recordInvocation("GetConfiguredServers", []interface{}{})
	fake.getConfiguredServersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) GetConfiguredServersCallCount() int {
	fake.getConfiguredServersMutex.RLock()
	defer fake.getConfiguredServersMutex.RUnlock()
	return len(fake.getConfiguredServersArgsForCall)
}

func (fake *FakeConfig) GetConfiguredServersCalls(stub func() []string) {
	fake.getConfiguredServersMutex.Lock()
	defer fake.getConfiguredServersMutex.Unlock()
	fake.GetConfiguredServersStub = stub
}

func (fake *FakeConfig) GetConfiguredServersReturns(result1 []string) {
	fake.getConfiguredServersMutex.Lock()
	defer fake.getConfiguredServersMutex.Unlock()
	fake.GetConfiguredServersStub = nil
	fake.getConfiguredServersReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfig) GetConfiguredServersReturnsOnCall(i int, result1 []string) {
	fake.getConfiguredServersMutex.Lock()
	defer fake.getConfiguredServersMutex.Unlock()
	fake.GetConfiguredServersStub = nil
	if fake.getConfiguredServersReturnsOnCall == nil {
		fake.getConfiguredServersReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getConfiguredServersReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfig) GetHiddenLabels() []string {
	fake.getHiddenLabelsMutex.Lock()
	ret, specificReturn := fake.getHiddenLabelsReturnsOnCall[len(fake.getHiddenLabelsArgsForCall)]
	fake.getHiddenLabelsArgsForCall = append(fake.getHiddenLabelsArgsForCall, struct {
	}{})
	stub := fake.GetHiddenLabelsStub
	fakeReturns := fake.getHiddenLabelsReturns
	fake.recordInvocation("GetHiddenLabels", []interface{}{})
	fake.getHiddenLabelsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) GetHiddenLabelsCallCount() int {
	fake.getHiddenLabelsMutex.RLock()
	defer fake.getHiddenLabelsMutex.RUnlock()
	return len(fake.getHiddenLabelsArgsForCall)
}

func (fake *FakeConfig) GetHiddenLabelsCalls(stub func() []string) {
	fake.getHiddenLabelsMutex.Lock()
	defer fake.getHiddenLabelsMutex.Unlock()
	fake.GetHiddenLabelsStub = stub
}

func (fake *FakeConfig) GetHiddenLabelsReturns(result1 []string) {
	fake.getHiddenLabelsMutex.Lock()
	defer fake.getHiddenLabelsMutex.Unlock()
	fake.GetHiddenLabelsStub = nil
	fake.getHiddenLabelsReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfig) GetHiddenLabelsReturnsOnCall(i int, result1 []string) {
	fake.getHiddenLabelsMutex.Lock()
	defer fake.getHiddenLabelsMutex.Unlock()
	fake.GetHiddenLabelsStub = nil
	if fake.getHiddenLabelsReturnsOnCall == nil {
		fake.getHiddenLabelsReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getHiddenLabelsReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfig) GetMaxAgeOfPRs() int {
	fake.getMaxAgeOfPRsMutex.Lock()
	ret, specificReturn := fake.getMaxAgeOfPRsReturnsOnCall[len(fake.getMaxAgeOfPRsArgsForCall)]
	fake.getMaxAgeOfPRsArgsForCall = append(fake.getMaxAgeOfPRsArgsForCall, struct {
	}{})
	stub := fake.GetMaxAgeOfPRsStub
	fakeReturns := fake.getMaxAgeOfPRsReturns
	fake.recordInvocation("GetMaxAgeOfPRs", []interface{}{})
	fake.getMaxAgeOfPRsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) GetMaxAgeOfPRsCallCount() int {
	fake.getMaxAgeOfPRsMutex.RLock()
	defer fake.getMaxAgeOfPRsMutex.RUnlock()
	return len(fake.getMaxAgeOfPRsArgsForCall)
}

func (fake *FakeConfig) GetMaxAgeOfPRsCalls(stub func() int) {
	fake.getMaxAgeOfPRsMutex.Lock()
	defer fake.getMaxAgeOfPRsMutex.Unlock()
	fake.GetMaxAgeOfPRsStub = stub
}

func (fake *FakeConfig) GetMaxAgeOfPRsReturns(result1 int) {
	fake.getMaxAgeOfPRsMutex.Lock()
	defer fake.getMaxAgeOfPRsMutex.Unlock()
	fake.GetMaxAgeOfPRsStub = nil
	fake.getMaxAgeOfPRsReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeConfig) GetMaxAgeOfPRsReturnsOnCall(i int, result1 int) {
	fake.getMaxAgeOfPRsMutex.Lock()
	defer fake.getMaxAgeOfPRsMutex.Unlock()
	fake.GetMaxAgeOfPRsStub = nil
	if fake.getMaxAgeOfPRsReturnsOnCall == nil {
		fake.getMaxAgeOfPRsReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getMaxAgeOfPRsReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeConfig) GetMaxNumberOfPRs() int {
	fake.getMaxNumberOfPRsMutex.Lock()
	ret, specificReturn := fake.getMaxNumberOfPRsReturnsOnCall[len(fake.getMaxNumberOfPRsArgsForCall)]
	fake.getMaxNumberOfPRsArgsForCall = append(fake.getMaxNumberOfPRsArgsForCall, struct {
	}{})
	stub := fake.GetMaxNumberOfPRsStub
	fakeReturns := fake.getMaxNumberOfPRsReturns
	fake.recordInvocation("GetMaxNumberOfPRs", []interface{}{})
	fake.getMaxNumberOfPRsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) GetMaxNumberOfPRsCallCount() int {
	fake.getMaxNumberOfPRsMutex.RLock()
	defer fake.getMaxNumberOfPRsMutex.RUnlock()
	return len(fake.getMaxNumberOfPRsArgsForCall)
}

func (fake *FakeConfig) GetMaxNumberOfPRsCalls(stub func() int) {
	fake.getMaxNumberOfPRsMutex.Lock()
	defer fake.getMaxNumberOfPRsMutex.Unlock()
	fake.GetMaxNumberOfPRsStub = stub
}

func (fake *FakeConfig) GetMaxNumberOfPRsReturns(result1 int) {
	fake.getMaxNumberOfPRsMutex.Lock()
	defer fake.getMaxNumberOfPRsMutex.Unlock()
	fake.GetMaxNumberOfPRsStub = nil
	fake.getMaxNumberOfPRsReturns = struct {
		result1 int
	}{result1}
}

func (fake *FakeConfig) GetMaxNumberOfPRsReturnsOnCall(i int, result1 int) {
	fake.getMaxNumberOfPRsMutex.Lock()
	defer fake.getMaxNumberOfPRsMutex.Unlock()
	fake.GetMaxNumberOfPRsStub = nil
	if fake.getMaxNumberOfPRsReturnsOnCall == nil {
		fake.getMaxNumberOfPRsReturnsOnCall = make(map[int]struct {
			result1 int
		})
	}
	fake.getMaxNumberOfPRsReturnsOnCall[i] = struct {
		result1 int
	}{result1}
}

func (fake *FakeConfig) GetReposToQuery(arg1 string) []string {
	fake.getReposToQueryMutex.Lock()
	ret, specificReturn := fake.getReposToQueryReturnsOnCall[len(fake.getReposToQueryArgsForCall)]
	fake.getReposToQueryArgsForCall = append(fake.getReposToQueryArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetReposToQueryStub
	fakeReturns := fake.getReposToQueryReturns
	fake.recordInvocation("GetReposToQuery", []interface{}{arg1})
	fake.getReposToQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) GetReposToQueryCallCount() int {
	fake.getReposToQueryMutex.RLock()
	defer fake.getReposToQueryMutex.RUnlock()
	return len(fake.getReposToQueryArgsForCall)
}

func (fake *FakeConfig) GetReposToQueryCalls(stub func(string) []string) {
	fake.getReposToQueryMutex.Lock()
	defer fake.getReposToQueryMutex.Unlock()
	fake.GetReposToQueryStub = stub
}

func (fake *FakeConfig) GetReposToQueryArgsForCall(i int) string {
	fake.getReposToQueryMutex.RLock()
	defer fake.getReposToQueryMutex.RUnlock()
	argsForCall := fake.getReposToQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConfig) GetReposToQueryReturns(result1 []string) {
	fake.getReposToQueryMutex.Lock()
	defer fake.getReposToQueryMutex.Unlock()
	fake.GetReposToQueryStub = nil
	fake.getReposToQueryReturns = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfig) GetReposToQueryReturnsOnCall(i int, result1 []string) {
	fake.getReposToQueryMutex.Lock()
	defer fake.getReposToQueryMutex.Unlock()
	fake.GetReposToQueryStub = nil
	if fake.getReposToQueryReturnsOnCall == nil {
		fake.getReposToQueryReturnsOnCall = make(map[int]struct {
			result1 []string
		})
	}
	fake.getReposToQueryReturnsOnCall[i] = struct {
		result1 []string
	}{result1}
}

func (fake *FakeConfig) SaveToDefaultLocation() error {
	fake.saveToDefaultLocationMutex.Lock()
	ret, specificReturn := fake.saveToDefaultLocationReturnsOnCall[len(fake.saveToDefaultLocationArgsForCall)]
	fake.saveToDefaultLocationArgsForCall = append(fake.saveToDefaultLocationArgsForCall, struct {
	}{})
	stub := fake.SaveToDefaultLocationStub
	fakeReturns := fake.saveToDefaultLocationReturns
	fake.recordInvocation("SaveToDefaultLocation", []interface{}{})
	fake.saveToDefaultLocationMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) SaveToDefaultLocationCallCount() int {
	fake.saveToDefaultLocationMutex.RLock()
	defer fake.saveToDefaultLocationMutex.RUnlock()
	return len(fake.saveToDefaultLocationArgsForCall)
}

func (fake *FakeConfig) SaveToDefaultLocationCalls(stub func() error) {
	fake.saveToDefaultLocationMutex.Lock()
	defer fake.saveToDefaultLocationMutex.Unlock()
	fake.SaveToDefaultLocationStub = stub
}

func (fake *FakeConfig) SaveToDefaultLocationReturns(result1 error) {
	fake.saveToDefaultLocationMutex.Lock()
	defer fake.saveToDefaultLocationMutex.Unlock()
	fake.SaveToDefaultLocationStub = nil
	fake.saveToDefaultLocationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfig) SaveToDefaultLocationReturnsOnCall(i int, result1 error) {
	fake.saveToDefaultLocationMutex.Lock()
	defer fake.saveToDefaultLocationMutex.Unlock()
	fake.SaveToDefaultLocationStub = nil
	if fake.saveToDefaultLocationReturnsOnCall == nil {
		fake.saveToDefaultLocationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveToDefaultLocationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfig) SaveToFile(arg1 string) error {
	fake.saveToFileMutex.Lock()
	ret, specificReturn := fake.saveToFileReturnsOnCall[len(fake.saveToFileArgsForCall)]
	fake.saveToFileArgsForCall = append(fake.saveToFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SaveToFileStub
	fakeReturns := fake.saveToFileReturns
	fake.recordInvocation("SaveToFile", []interface{}{arg1})
	fake.saveToFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConfig) SaveToFileCallCount() int {
	fake.saveToFileMutex.RLock()
	defer fake.saveToFileMutex.RUnlock()
	return len(fake.saveToFileArgsForCall)
}

func (fake *FakeConfig) SaveToFileCalls(stub func(string) error) {
	fake.saveToFileMutex.Lock()
	defer fake.saveToFileMutex.Unlock()
	fake.SaveToFileStub = stub
}

func (fake *FakeConfig) SaveToFileArgsForCall(i int) string {
	fake.saveToFileMutex.RLock()
	defer fake.saveToFileMutex.RUnlock()
	argsForCall := fake.saveToFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConfig) SaveToFileReturns(result1 error) {
	fake.saveToFileMutex.Lock()
	defer fake.saveToFileMutex.Unlock()
	fake.SaveToFileStub = nil
	fake.saveToFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfig) SaveToFileReturnsOnCall(i int, result1 error) {
	fake.saveToFileMutex.Lock()
	defer fake.saveToFileMutex.Unlock()
	fake.SaveToFileStub = nil
	if fake.saveToFileReturnsOnCall == nil {
		fake.saveToFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveToFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeConfig) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getBotAccountsMutex.RLock()
	defer fake.getBotAccountsMutex.RUnlock()
	fake.getConfiguredServersMutex.RLock()
	defer fake.getConfiguredServersMutex.RUnlock()
	fake.getHiddenLabelsMutex.RLock()
	defer fake.getHiddenLabelsMutex.RUnlock()
	fake.getMaxAgeOfPRsMutex.RLock()
	defer fake.getMaxAgeOfPRsMutex.RUnlock()
	fake.getMaxNumberOfPRsMutex.RLock()
	defer fake.getMaxNumberOfPRsMutex.RUnlock()
	fake.getReposToQueryMutex.RLock()
	defer fake.getReposToQueryMutex.RUnlock()
	fake.saveToDefaultLocationMutex.RLock()
	defer fake.saveToDefaultLocationMutex.RUnlock()
	fake.saveToFileMutex.RLock()
	defer fake.saveToFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfig) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.Config = new(FakeConfig)
